---
import type {
  BuiltinLanguage,
  BuiltinTheme,
  LanguageRegistration,
  SpecialLanguage,
  ThemeRegistration,
  ThemeRegistrationRaw,
} from 'shiki'
import { createHighlighter } from 'shiki'
type themeType = BuiltinTheme | ThemeRegistration | ThemeRegistrationRaw

export interface Props {
  code: string
  lang?: BuiltinLanguage | SpecialLanguage | LanguageRegistration
  themes?: {
    light: themeType
    dark: themeType
  }
}

const {
  code,
  lang = 'plaintext',
  themes = {
    light: 'catppuccin-latte',
    dark: 'catppuccin-mocha',
  },
} = Astro.props as Props

const highlighter = await createHighlighter({
  themes: [themes.light, themes.dark],
  langs: [lang],
})

const bgLight = highlighter.getTheme(themes.light).bg
const bgDark = highlighter.getTheme(themes.dark).bg

const codeOutput = highlighter.codeToHtml(code, {
  // name: 'astro-code', 

  // cssVariablePrefix: '--shiki-',
  lang: lang as string,
  themes: {
    light: themes.light,
    dark: themes.dark,
  },
})

highlighter.dispose()
---

<style define:vars={{ bgLight, bgDark }} lang="scss">
  div {
    --bg: var(--shiki-dark);
    :global(.dark) & {
      --bg: var(--bgDark);
    }
  }
</style>

<div class="wtq-app-block wtq-code-block wtq-rounded">
  <div class="head">
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
  </div>
  <Fragment set:html={codeOutput} />
</div>
