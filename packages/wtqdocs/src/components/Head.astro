---
// // @ts-ignore
// import { pwaAssetsHead } from 'virtual:pwa-assets/head'
// // @ts-ignore
// import { pwaInfo } from 'virtual:pwa-info'

import { BaseHead } from 'astro-toolkit/seo'

import type { WathqnyConfig as WathqnyConfigType } from '../types/config'

// @ts-ignore
import untypedWathqnyConfig from '/wathqny.config'
import type { LayoutInterface } from '../types/components'

const WathqnyConfig: WathqnyConfigType = untypedWathqnyConfig

export interface Props extends LayoutInterface {}

const { title, keywords, description, OGImage } = Astro.props as Props

const METATITLE = title
  ? `${title} - ${WathqnyConfig.siteName}`
  : WathqnyConfig.siteName
const METAIMAGE = OGImage?.src ?? WathqnyConfig.OGImage?.src
const METAIMAGEALT = OGImage?.alt ?? WathqnyConfig.OGImage?.alt
const METADESCRIPTION = description ?? WathqnyConfig.description
const METAKEYWORDS = keywords ?? [...(WathqnyConfig.keywords || [])]
---

<BaseHead
  title={METATITLE}
  description={METADESCRIPTION}
  keywords={METAKEYWORDS}
  OGImage={{ src: METAIMAGE, alt: METAIMAGEALT }}
  GSVToken={WathqnyConfig.GSVToken}
  extend={{
    link: [
      {
        href: WathqnyConfig.font,
        rel: 'preload',
        as: 'font',
        type: 'font/woff2',
        crossorigin: 'anonymous',
      },
      // @ts-expect-error Type '{ href: string; rel?: string; onload?: string; media?: string; as?: string; }[] | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)
      ...WathqnyConfig.css
    ],
  }}
>
  <!-- {pwaAssetsHead.themeColor && <meta name="theme-color" content={pwaAssetsHead.themeColor.content} />}
  {pwaAssetsHead.links.map((link: astroHTML.JSX.IntrinsicAttributes & astroHTML.JSX.LinkHTMLAttributes) => <link {...link} />)}
  {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />} -->
  <meta name="color-scheme" content="dark light" />
  <link rel="icon" type="image/x-icon" href="/icon.svg">
  <!-- <script src="./pwa.ts"></script> -->
  <script is:inline>
      const root = document.documentElement;

    if (
      localStorage.theme === "dark" ||(!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)) {
      root?.classList.replace("light", "dark");
    } else {
      root?.classList.replace("dark", "light");
    }
  </script>
    <script>
      // Function to set speculation rules
      function setSpeculationRules() {
        // Define the speculation rules
        const rules = {
          prefetch: [],
          prerender: []
        };
  
        document.querySelectorAll('.prefetch-link').forEach(link => {
          const href = link.getAttribute('href');
          
          link.addEventListener('mouseenter', () => {
            // Prefetch and prerender the page after 200ms hover
            setTimeout(() => {
              rules.prefetch.push({ source: href });
              rules.prerender.push({ source: href });
              // Apply the speculation rules
              document.adoptedStyleSheets = [...document.adoptedStyleSheets, new CSSStyleSheet()];
              document.speculationRules = rules;
            }, 200);
          });
  
          link.addEventListener('mouseleave', () => {
            // Clear the rules if the link is no longer hovered
            setTimeout(() => {
              rules.prefetch = rules.prefetch.filter(rule => rule.source !== href);
              rules.prerender = rules.prerender.filter(rule => rule.source !== href);
              document.speculationRules = rules;
            }, 200);
          });
        });
      }
  
      // Set speculation rules on page load
      window.addEventListener('load', setSpeculationRules);
    </script>
  <meta name="generator" content="wathqny 1.0 Astro powerd" />
  <slot />
</BaseHead>